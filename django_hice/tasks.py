import subprocess
import tempfile
import glob, os
import re

from django.conf import settings

from rq import get_current_job

from .models import Task

def run_boogie(task):

    # Path to Boogie binaries
    BOOGIE_PATH = settings.BOOGIE_PATH

    # Get job
    job = get_current_job()

    # Update task status
    task.status = "working"
    task.save()

    # Perform task
    with tempfile.NamedTemporaryFile(mode='w+', suffix='.bpl') as tf:

        # Store temp file in non-persistent field in task object
        task.temp_file_name = tf.name

        #
        # Write input to file
        #
        tf.write(task.data)
        tf.flush()

        #
        # Generate command to run Boogie
        #
        command = [
            'mono',
            BOOGIE_PATH + '/Boogie.exe',
            '/z3exe:' + BOOGIE_PATH + '/z3.exe',
            '/noinfer',
        ]

        # Trace
        if task.trace:
            command += ['/trace']

        # Inference
        inference_methods_dict = {
            Task.NONE: None,
            Task.HOUDINI: ['/mlHoudini:' + BOOGIE_PATH + "/sorcar", '/learnerOptions:-a horndini'],
            Task.SORCAR: ['/mlHoudini:' + BOOGIE_PATH + "/sorcar", '/learnerOptions:-a sorcar'],
            Task.DT: ['/mlHoudini:' + BOOGIE_PATH + "/hice-dt"],
        }
        inference_methods_cla = inference_methods_dict.get(task.inference, None) # We interpret everything unknown as 'none'
        if inference_methods_cla:
            command += ['/contractInfer'] + inference_methods_cla

        # BPL file
        command += [tf.name]

        #
        # Run Boogie
        #
        completedProcess = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, encoding='utf-8')
        result = completedProcess.stdout

        #
        # Clean up temporary files generated by Boogie
        #
        for f in glob.glob(tf.name + ".*"):
            os.remove(f)

        #
        # Postprocess output, throw exception if necessary
        #

        # Learner error
        if completedProcess.stderr and re.search('The learner seems to have run into an error!', completedProcess.stderr):
            task.result = '<p>Sorry, but the learner seems to have run into trouble!</p>'
            task.result += '<p>This can mean several things:'
            task.result += '<ul><li>The learner has detected that the assertions do not hold.</li>'
            task.result += '<li>The provided predicates were insufficient to prove the assertions.</li>'
            task.result += '<li>Sorcar/Houdini was invoked with non-Boolean arguments.</li></ul>'
            task.result += 'In any case, you might want to correct your program.</p>'
            task.status = 'info'
            task.save()
            return

        # Check return code and throw exception if non-null
        completedProcess.check_returncode()

        #
        # Save task and mark it finished
        #
        task.result = result
        task.status = 'finished'
        task.save()

    return
